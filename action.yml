name: Terraform Apply a Pull Request
description: This workflow will run terraform apply on the merge commit of a pull request and upload the output to S3 for persistence.
author: jrafferty@tamu.edu

inputs:
  debug:
    description: Debug workflow with tmate if an error occurs
    required: false
    default: "false"
  GITHUB_TOKEN:
    description: GitHub token for access to the pull request
    required: true
  working-directory:
    description: Working directory for the `run` actions
    required: false
    default: ''
  terraform-version:
    description: Version of terraform to install
    required: false
    default: latest
  terraform-workspace:
    description: Terraform workspace to select. Must already exist 
    required: false
    default: default
  terraform-init-flags:
    description: CLI flags to use with terraform init
    required: false
    default: ""
  terraform-apply-flags:
    description: CLI flags to use with terraform apply
    required: false
    default: ""
  persist-apply-log:
    description: Persist the terraform apply log in long-term storage, by default in the same location as your backend state.
    required: false
    default: "true"
  bucket:
    description: Override the bucket name for s3 and gcs to upload output to. Defaults to the same as the state backend, if using s3 or gcp
    required: false
    default: ""
  resource-group-name:
    description: Override the azurerm resource group to upload output to.
    required: false
    default: ""
  storage-account-name:
    description: Override the storage account to use to upload output. Defaults to the same as the azurerm backend, if using azurerm.
    required: false
    default: ""
  container-name:
    description: Override the container into which to upload the output. Defaults to the same as the azurerm backend, if using azurerm.
    required: false
    default: ""
  key-path:
    description: Override the path to upload output to. Defaults to the root.
    required: false
    default: ""
  key-name:
    description: Override the filename portion of the key. Defaults to a path merge of the github repo, PR ID, and a timestamp
    required: false
    default: ""
  pr-id:
    description: Associate the run with a specific pull request id. Defaults to finding the ID from the merge commit.
    required: false
    default: ""
  no-pr:
    description: Don't require or look up a pull request ID. Skip associated actions
    required: false
    default: "false"
  auto-approve:
    description: Auto approve terraform apply
    required: false
    default: "true"

outputs:
  apply_output:
    description: The terraform apply output
    value: ${{ steps.output.outputs.output }}

runs:
  using: composite
  steps:
    - name: Find if this push belonged to a PR
      if: (github.event_name == 'push') && (inputs.no_pr != 'true')
      uses: 8BitJonny/gh-get-current-pr@2.2.0
      id: pr

    - name: Consolidate PR ID
      shell: bash
      id: pr_id
      if: inputs.no_pr != 'true'
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          if [[ "${{ steps.pr.outputs.pr_found }}" == "false" ]]; then
            echo "No PR found for this workflow run. Exiting."
            exit 1
          fi
          number=${{ steps.pr.outputs.number }}
        else
          number=${{ inputs.pr-id }}
        fi

        echo "number=$number" >> $GITHUB_OUTPUT
        echo "This workflow run is associated with pull request ID: $number"

    - name: setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Terraform Apply
      id: apply
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        TF_WORKSPACE: ${{ inputs.terraform-workspace }}
      run: |
        terraform init ${{ inputs.terraform-init-flags }}
        terraform apply -input=false -no-color ${{ inputs.auto-approve == 'true' && '-auto-approve' || '' }} ${{ inputs.terraform-apply-flags }}
      continue-on-error: true

    - name: Write Apply output to file
      id: output
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        touch apply.log
        echo "${{ steps.apply.outputs.stdout }}" >> apply.log
        echo "${{ steps.apply.outputs.stderr }}" >> apply.log
        echo "filename=apply.log" >> $GITHUB_OUTPUT

        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "output<<$EOF" >> "$GITHUB_OUTPUT"
        cat apply.log >> "$GITHUB_OUTPUT"
        echo "$EOF" >> "$GITHUB_OUTPUT"

        echo "summary=$(cat apply.log | grep 'Apply complete')" >> "$GITHUB_OUTPUT"

    - name: Copy logs to persistent storage
      id: copy_logs
      if: inputs.persist-apply-log == true
      shell: bash
      run: |

        # Set value for the file to copy
        source_file="${{ steps.output.outputs.filename }}"

        # Set value for the key prefix
        [[ -n "${{ inputs.key-prefix }}" ]] && key_prefix="${{ inputs.key-prefix }}" || key_prefix="apply_logs"

        # Set value for the key name
        [[ -n "${{ inputs.key-name }}" ]] && key_name="${{ inputs.key-name }}" || key_name="${{ github.repository }}/pr-${{ steps.pr_id.outputs.number }}/$(date -u +'%Y-%m-%d/apply-%Y-%m-%dT%H:%M:%SZ.log')"

        # Where to find the terraform
        working_directory="${{ inputs.working-directory }}"

        copy_logs
        status=$?

        if [ $status == 0 ]; then
          echo ${{ steps.copy_logs.outputs.output }}
        else
          echo "Wasn't apply to persist apply logs"
          return $status
        fi

    - name: Comment Apply output to PR
      id: comment-apply
      uses: peter-evans/create-or-update-comment@v2
      if: inputs.no_pr != 'true'
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
        issue-number: ${{ steps.pr_id.outputs.number }}
        body: |
          Terraform Apply: ${{ steps.output.outputs.summary }}

          ${{ steps.copy_logs.outputs.output}}

          <details open><summary>Show Output</summary>

          ```
          ${{ steps.apply.outputs.stdout }}
          ${{ steps.apply.outputs.stderr }}

          </details>
          ```

    - name: Create issue on apply failure
      uses: actions/github-script@v6
      if: steps.apply.conclusion == 'failure'
      with:
        script: |
          var body = `Apply from PR ${{ steps.pr_id.outputs.number }} failed.

            Please review the logs and take appropriate action.

            ${{ steps.copy_logs.outputs.output}}

            <details open><summary>Show Output</summary>

            \`\`\`
            ${{ steps.apply.outputs.stdout }}
            ${{ steps.apply.outputs.stderr }}
            \`\`\`

            </details>
          `
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '[Terraform Failure] Apply from PR ${{ steps.pr_id.outputs.number }} failed.',
            body: body.substring(0, 65536),
            labels: ['terraform-failure']
          })

    - name: Debug with TMATE if the debug environment variable is set to "true" and something failed
      if: ${{ (failure() || steps.apply.outcome == 'failure') && inputs.debug == 'true' }}
      uses: mxschmitt/action-tmate@v3

    - name: Workflow Run Status
      shell: bash
      if: steps.apply.outcome == 'failure'
      run: exit 1
